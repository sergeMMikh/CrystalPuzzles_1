name: Deploy by ssh

on:
  push:
    branches:
      - main

jobs:
  refresh_content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

  #     - name: Set nginx log files
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #           sudo mkdir /var/log/nginx 2>/dev/null
  #           sudo touch /var/log/nginx/error.log 2>/dev/null
  #           sudo touch /var/log/nginx/access.log 2>/dev/null
  #           ls -la /var/log/nginx
        
  #     - name: Change directory permitions
  #       uses: ./.github/workflows/change-directory-permissions
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}              
            
  #     - name: Refresh content
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
  #     - name: Sync Repository via SSH
  #       run: |
  #         rsync -e "ssh -i $HOME/.ssh/key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }}" --archive --compress --delete \
  #         . ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST_NAME }}:Crystall

  #     - name: Change directory permitions again
  #       uses: ./.github/workflows/change-directory-permissions
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}

  # check_docker_and_compose:
  #   needs: refresh_content
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check docker and docker-compose
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #            /home/${{ secrets.SSH_USERNAME }}/Crystall/devops/check_docker.sh || \
  #            /home/${{ secrets.SSH_USERNAME }}/Crystall/devops/install_docker_docker-compose.sh ||
  #             echo "Did not check Docker"

  # clean_docker_conteiners_and_images:
  #   needs: check_docker_and_compose
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Stop docker conteiners and clean docker images
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #           sudo docker stop $(docker ps -aq) && \
  #           sudo docker system prune --all --force \
  #           || echo "No docker conteiners are running"

  # start_docker:
  #   #needs: check_docker_and_compose
  #   needs: clean_docker_conteiners_and_images
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Start docker compose
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SSH_HOST_NAME }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #           sudo docker compose -f /home/${{ secrets.SSH_USERNAME }}/Crystall/docker-compose.prod.yml up -d

# jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the current tag
        id: current_tag
        run: |
          # Get the latest tag that matches the version pattern
          TAG=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 || echo "v0.0.0")
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Current tag: $TAG"

      - name: Bump version
        id: bump_version
        run: |
          TAG=${{ steps.current_tag.outputs.tag }}
          echo "Current tag: $TAG"

          # Check if the tag is in a valid format
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IFS='.' read -r -a VERSION_PARTS <<< "${TAG#v}"
            VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
            NEW_TAG="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          else
            # Fallback to a default tag if the current tag is not valid
            NEW_TAG="v0.0.1"
          fi

          echo "New tag: $NEW_TAG"
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create new tag
        run: |
          NEW_TAG=${{ steps.bump_version.outputs.new_tag }}
          git tag $NEW_TAG
          git push origin $NEW_TAG
