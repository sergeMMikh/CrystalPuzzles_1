"""
Шаблон Unit of Work помогает управлять транзакциями, чтобы обеспечить атомарность операций, 
т.е., что все действия в рамках одной транзакции либо успешны, либо откатываются. 
В данном случае абстрактный класс AbstractUnitOfWork определяет интерфейс для работы с транзакциями, 
но не реализует конкретную логику взаимодействия с базой данных.
"""

import abc
"""
abc — это стандартный модуль Python для создания абстрактных классов. 
Он позволяет определять методы, которые должны быть реализованы в дочерних классах, 
но не реализуются в самом абстрактном классе.
"""

from typing import Type, TypeVar
"""
typing.Type и typing.TypeVar — используются для указания типов, что помогает писать типобезопасный код.
"""

from common.repository.base_repository import BaseRepository
"""
BaseRepository — это класс, представляющий базовый репозиторий для работы с конкретной сущностью базы данных. 
Он импортируется из внешнего модуля, и его реализация здесь не показана, но важно знать, 
что BaseRepository определяет базовый набор операций для работы с базой данных.
"""

TRepository = TypeVar("TRepository", bound=BaseRepository)


class AbstractUnitOfWork(abc.ABC):
    """Абстрактный класс для управления транзакциями, которые оборачивают работу с репозиториями. 
    Его основное назначение — создание контекста для работы с транзакциями, 
    где можно использовать методы для начала и окончания транзакций 
    (или отката изменений в случае ошибки)."""

    repo: Type[TRepository]
    """
    Этот атрибут предполагает, что конкретная реализация UnitOfWork будет включать репозиторий repo, 
    который будет представлять собой конкретный подкласс BaseRepository
    """
    @abc.abstractmethod
    def __init__(self) -> None:
        """
        Сам конструктор сразу выбрасывает NotImplementedError, 
        чтобы в случае его вызова напрямую указать, что он должен быть переопределен.
        """
        raise NotImplementedError

    @abc.abstractmethod
    async def __aenter__(self) -> TRepository:
        """
        Этот метод позволяет использовать AbstractUnitOfWork в асинхронном контексте async with. 
        Он должен возвращать экземпляр репозитория (TRepository), связанный с транзакцией, 
        которая начинается при входе в контекст.
        """
        raise NotImplementedError

    @abc.abstractmethod
    async def __aexit__(self, *args) -> None:
        """
        Этот метод вызывается при выходе из async with блока и завершает транзакцию. 
        Его нужно реализовать так, чтобы он корректно завершал транзакцию или откатывал изменения в случае ошибки.
        """
        raise NotImplementedError

    @abc.abstractmethod
    async def commit(self) -> None:
        """
        метод фиксации изменений в транзакции.
        """
        raise NotImplementedError

    @abc.abstractmethod
    async def rollback(self) -> None:
        """
        Метод для отката изменений при возникновении ошибки.
        """
        raise NotImplementedError
